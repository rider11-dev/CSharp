#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqDemo.LinqToSql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LinqToSql")]
	public partial class DefectModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDefect(Defect instance);
    partial void UpdateDefect(Defect instance);
    partial void DeleteDefect(Defect instance);
    partial void InsertDefectUser(DefectUser instance);
    partial void UpdateDefectUser(DefectUser instance);
    partial void DeleteDefectUser(DefectUser instance);
    partial void InsertNotificationSubscription(NotificationSubscription instance);
    partial void UpdateNotificationSubscription(NotificationSubscription instance);
    partial void DeleteNotificationSubscription(NotificationSubscription instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    #endregion
		
		public DefectModelDataContext() : 
				base(global::LinqDemo.Properties.Settings.Default.LinqToSqlConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DefectModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DefectModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DefectModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DefectModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Defect> Defect
		{
			get
			{
				return this.GetTable<Defect>();
			}
		}
		
		public System.Data.Linq.Table<DefectUser> DefectUser
		{
			get
			{
				return this.GetTable<DefectUser>();
			}
		}
		
		public System.Data.Linq.Table<NotificationSubscription> NotificationSubscription
		{
			get
			{
				return this.GetTable<NotificationSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Defect")]
	public partial class Defect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DefectID;
		
		private string _Project;
		
		private string _DefectSummary;
		
		private string _DefectStatus;
		
		private string _CreatedBy;
		
		private string _AssignedTo;
		
		private System.DateTime _LastModified;
		
		private string _Severity;
		
		private EntityRef<DefectUser> _DefectUser;
		
		private EntityRef<DefectUser> _DefectUser1;
		
		private EntityRef<Project> _Project1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDefectIDChanging(string value);
    partial void OnDefectIDChanged();
    partial void OnProjectChanging(string value);
    partial void OnProjectChanged();
    partial void OnDefectSummaryChanging(string value);
    partial void OnDefectSummaryChanged();
    partial void OnDefectStatusChanging(string value);
    partial void OnDefectStatusChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnAssignedToChanging(string value);
    partial void OnAssignedToChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnSeverityChanging(string value);
    partial void OnSeverityChanged();
    #endregion
		
		public Defect()
		{
			this._DefectUser = default(EntityRef<DefectUser>);
			this._DefectUser1 = default(EntityRef<DefectUser>);
			this._Project1 = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DefectID
		{
			get
			{
				return this._DefectID;
			}
			set
			{
				if ((this._DefectID != value))
				{
					this.OnDefectIDChanging(value);
					this.SendPropertyChanging();
					this._DefectID = value;
					this.SendPropertyChanged("DefectID");
					this.OnDefectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					if (this._Project1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectSummary", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string DefectSummary
		{
			get
			{
				return this._DefectSummary;
			}
			set
			{
				if ((this._DefectSummary != value))
				{
					this.OnDefectSummaryChanging(value);
					this.SendPropertyChanging();
					this._DefectSummary = value;
					this.SendPropertyChanged("DefectSummary");
					this.OnDefectSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectStatus", DbType="VarChar(20) NOT NULL")]
		public string DefectStatus
		{
			get
			{
				return this._DefectStatus;
			}
			set
			{
				if ((this._DefectStatus != value))
				{
					this.OnDefectStatusChanging(value);
					this.SendPropertyChanging();
					this._DefectStatus = value;
					this.SendPropertyChanged("DefectStatus");
					this.OnDefectStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._DefectUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedTo", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string AssignedTo
		{
			get
			{
				return this._AssignedTo;
			}
			set
			{
				if ((this._AssignedTo != value))
				{
					if (this._DefectUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedToChanging(value);
					this.SendPropertyChanging();
					this._AssignedTo = value;
					this.SendPropertyChanged("AssignedTo");
					this.OnAssignedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL")]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Severity", DbType="VarChar(20) NOT NULL")]
		public string Severity
		{
			get
			{
				return this._Severity;
			}
			set
			{
				if ((this._Severity != value))
				{
					this.OnSeverityChanging(value);
					this.SendPropertyChanging();
					this._Severity = value;
					this.SendPropertyChanged("Severity");
					this.OnSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefectUser_Defect", Storage="_DefectUser", ThisKey="AssignedTo", OtherKey="UserID", IsForeignKey=true)]
		public DefectUser DefectUser
		{
			get
			{
				return this._DefectUser.Entity;
			}
			set
			{
				DefectUser previousValue = this._DefectUser.Entity;
				if (((previousValue != value) 
							|| (this._DefectUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DefectUser.Entity = null;
						previousValue.Defect.Remove(this);
					}
					this._DefectUser.Entity = value;
					if ((value != null))
					{
						value.Defect.Add(this);
						this._AssignedTo = value.UserID;
					}
					else
					{
						this._AssignedTo = default(string);
					}
					this.SendPropertyChanged("DefectUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefectUser_Defect1", Storage="_DefectUser1", ThisKey="CreatedBy", OtherKey="UserID", IsForeignKey=true)]
		public DefectUser DefectUser1
		{
			get
			{
				return this._DefectUser1.Entity;
			}
			set
			{
				DefectUser previousValue = this._DefectUser1.Entity;
				if (((previousValue != value) 
							|| (this._DefectUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DefectUser1.Entity = null;
						previousValue.Defect1.Remove(this);
					}
					this._DefectUser1.Entity = value;
					if ((value != null))
					{
						value.Defect1.Add(this);
						this._CreatedBy = value.UserID;
					}
					else
					{
						this._CreatedBy = default(string);
					}
					this.SendPropertyChanged("DefectUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Defect", Storage="_Project1", ThisKey="Project", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project1
		{
			get
			{
				return this._Project1.Entity;
			}
			set
			{
				Project previousValue = this._Project1.Entity;
				if (((previousValue != value) 
							|| (this._Project1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project1.Entity = null;
						previousValue.Defect.Remove(this);
					}
					this._Project1.Entity = value;
					if ((value != null))
					{
						value.Defect.Add(this);
						this._Project = value.ProjID;
					}
					else
					{
						this._Project = default(string);
					}
					this.SendPropertyChanged("Project1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefectUser")]
	public partial class DefectUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private string _UserName;
		
		private string _UserType;
		
		private EntitySet<Defect> _Defect;
		
		private EntitySet<Defect> _Defect1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    #endregion
		
		public DefectUser()
		{
			this._Defect = new EntitySet<Defect>(new Action<Defect>(this.attach_Defect), new Action<Defect>(this.detach_Defect));
			this._Defect1 = new EntitySet<Defect>(new Action<Defect>(this.attach_Defect1), new Action<Defect>(this.detach_Defect1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(20) NOT NULL")]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefectUser_Defect", Storage="_Defect", ThisKey="UserID", OtherKey="AssignedTo")]
		public EntitySet<Defect> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				this._Defect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DefectUser_Defect1", Storage="_Defect1", ThisKey="UserID", OtherKey="CreatedBy")]
		public EntitySet<Defect> Defect1
		{
			get
			{
				return this._Defect1;
			}
			set
			{
				this._Defect1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Defect(Defect entity)
		{
			this.SendPropertyChanging();
			entity.DefectUser = this;
		}
		
		private void detach_Defect(Defect entity)
		{
			this.SendPropertyChanging();
			entity.DefectUser = null;
		}
		
		private void attach_Defect1(Defect entity)
		{
			this.SendPropertyChanging();
			entity.DefectUser1 = this;
		}
		
		private void detach_Defect1(Defect entity)
		{
			this.SendPropertyChanging();
			entity.DefectUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NotificationSubscription")]
	public partial class NotificationSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NotifyID;
		
		private string _ProjectID;
		
		private string _Email;
		
		private EntityRef<Project> _Project;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotifyIDChanging(string value);
    partial void OnNotifyIDChanged();
    partial void OnProjectIDChanging(string value);
    partial void OnProjectIDChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public NotificationSubscription()
		{
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotifyID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NotifyID
		{
			get
			{
				return this._NotifyID;
			}
			set
			{
				if ((this._NotifyID != value))
				{
					this.OnNotifyIDChanging(value);
					this.SendPropertyChanging();
					this._NotifyID = value;
					this.SendPropertyChanged("NotifyID");
					this.OnNotifyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="VarChar(36) NOT NULL", CanBeNull=false)]
		public string ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_NotificationSubscription", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.NotificationSubscription.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.NotificationSubscription.Add(this);
						this._ProjectID = value.ProjID;
					}
					else
					{
						this._ProjectID = default(string);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProjID;
		
		private string _ProjName;
		
		private EntitySet<Defect> _Defect;
		
		private EntitySet<NotificationSubscription> _NotificationSubscription;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjIDChanging(string value);
    partial void OnProjIDChanged();
    partial void OnProjNameChanging(string value);
    partial void OnProjNameChanged();
    #endregion
		
		public Project()
		{
			this._Defect = new EntitySet<Defect>(new Action<Defect>(this.attach_Defect), new Action<Defect>(this.detach_Defect));
			this._NotificationSubscription = new EntitySet<NotificationSubscription>(new Action<NotificationSubscription>(this.attach_NotificationSubscription), new Action<NotificationSubscription>(this.detach_NotificationSubscription));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="VarChar(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ProjName
		{
			get
			{
				return this._ProjName;
			}
			set
			{
				if ((this._ProjName != value))
				{
					this.OnProjNameChanging(value);
					this.SendPropertyChanging();
					this._ProjName = value;
					this.SendPropertyChanged("ProjName");
					this.OnProjNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Defect", Storage="_Defect", ThisKey="ProjID", OtherKey="Project")]
		public EntitySet<Defect> Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				this._Defect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_NotificationSubscription", Storage="_NotificationSubscription", ThisKey="ProjID", OtherKey="ProjectID")]
		public EntitySet<NotificationSubscription> NotificationSubscription
		{
			get
			{
				return this._NotificationSubscription;
			}
			set
			{
				this._NotificationSubscription.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Defect(Defect entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = this;
		}
		
		private void detach_Defect(Defect entity)
		{
			this.SendPropertyChanging();
			entity.Project1 = null;
		}
		
		private void attach_NotificationSubscription(NotificationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_NotificationSubscription(NotificationSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
}
#pragma warning restore 1591
